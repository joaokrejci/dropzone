{"ast":null,"code":"var _jsxFileName = \"/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"./Dropzone.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropzone = () => {\n  _s();\n\n  const [fileBundles, setFileBundles] = useState([]);\n  const [isHovering, setIsHovering] = useState();\n  const hiddenInputRef = useRef(null);\n  useEffect(() => {\n    console.log(fileBundles);\n  });\n\n  function addFiles(files) {\n    setFileBundles(f => {\n      f.push({\n        files: files,\n        custodian: \"Anonymous\"\n      });\n      return f;\n    });\n  }\n\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n\n  function handleDrop(event) {\n    console.log(\"onDrop\");\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n    const {\n      items,\n      files\n    } = event.dataTransfer;\n\n    if (items) {\n      addFiles(Array.from(items).filter(item => item.kind === \"file\").map(i => i.getAsFile()));\n    } else {\n      addFiles(Array.from(files));\n    }\n  }\n\n  function handleDropzoneClick(event) {\n    var _hiddenInputRef$curre;\n\n    (_hiddenInputRef$curre = hiddenInputRef.current) === null || _hiddenInputRef$curre === void 0 ? void 0 : _hiddenInputRef$curre.click();\n  }\n\n  function handleInputChange(event) {\n    addFiles(Array.from(event.currentTarget.files || []));\n    event.currentTarget.files = null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragOver: handleDragOver,\n    onDragEnter: () => setIsHovering(true),\n    onDragExit: () => setIsHovering(false),\n    onDrop: handleDrop,\n    onClick: handleDropzoneClick,\n    className: `Dropzone ${isHovering ? \"hovering\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: true,\n      tabIndex: -1,\n      className: \"hiddenInput\",\n      onChange: handleInputChange,\n      ref: hiddenInputRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), fileBundles.length ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop your files here or click to upload them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropzone, \"UzgQ8iL4QJIdk6CmLVU5hIzzkNY=\");\n\n_c = Dropzone;\nexport default Dropzone;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropzone\");","map":{"version":3,"sources":["/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx"],"names":["React","useEffect","useRef","useState","Dropzone","fileBundles","setFileBundles","isHovering","setIsHovering","hiddenInputRef","console","log","addFiles","files","f","push","custodian","handleDragOver","event","preventDefault","handleDrop","stopPropagation","items","dataTransfer","Array","from","filter","item","kind","map","i","getAsFile","handleDropzoneClick","current","click","handleInputChange","currentTarget","length"],"mappings":"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","sourcesContent":["import React, {\n  ChangeEvent,\n  DragEvent,\n  MouseEvent,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport \"./Dropzone.css\";\n\ninterface FileBundle {\n  files: Array<File | null>;\n  custodian: string;\n}\n\nconst Dropzone = () => {\n  const [fileBundles, setFileBundles] = useState<Array<FileBundle | undefined>>(\n    []\n  );\n  const [isHovering, setIsHovering] = useState<boolean>();\n  const hiddenInputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n      console.log(fileBundles)\n  })\n\n  function addFiles(files: Array<File | null>) {\n    setFileBundles((f) => {\n      f.push({\n        files: files,\n        custodian: \"Anonymous\",\n      });\n      return f;\n    });\n  }\n\n  function handleDragOver(event: DragEvent<HTMLElement>): void {\n    event.preventDefault();\n  }\n\n  function handleDrop(event: DragEvent<HTMLElement>): void {\n    console.log(\"onDrop\")\n\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { items, files } = event.dataTransfer;\n\n    if (items) {\n      addFiles(\n        Array.from(items)\n          .filter((item) => item.kind === \"file\")\n          .map((i) => i.getAsFile())\n      );\n    } else {\n      addFiles(Array.from(files));\n    }\n  }\n\n  function handleDropzoneClick(event: MouseEvent<HTMLElement>) {\n    hiddenInputRef.current?.click();\n  }\n\n  function handleInputChange(event: ChangeEvent<HTMLInputElement>) {\n    addFiles(Array.from(event.currentTarget.files || []));\n    event.currentTarget.files = null;\n  }\n\n  return (\n    <div\n      onDragOver={handleDragOver}\n      onDragEnter={() => setIsHovering(true)}\n      onDragExit={() => setIsHovering(false)}\n      onDrop={handleDrop}\n      onClick={handleDropzoneClick}\n      className={`Dropzone ${isHovering ? \"hovering\" : \"\"}`}\n    >\n      <input\n        type=\"file\"\n        multiple\n        tabIndex={-1}\n        className=\"hiddenInput\"\n        onChange={handleInputChange}\n        ref={hiddenInputRef}\n      />\n      {fileBundles.length ? null : (\n        <p>Drop your files here or click to upload them.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}