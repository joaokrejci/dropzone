{"ast":null,"code":"import isReactNative from './isReactNative'; // TODO: Differenciate between input types\n\n/**\n * Generate a fingerprint for a file which will be used the store the endpoint\n *\n * @param {File} file\n * @param {Object} options\n * @param {Function} callback\n */\n\nexport default function fingerprint(file, options) {\n  if (isReactNative()) {\n    return Promise.resolve(reactNativeFingerprint(file, options));\n  }\n\n  return Promise.resolve(['tus-br', file.name, file.type, file.size, file.lastModified, options.endpoint].join('-'));\n}\n\nfunction reactNativeFingerprint(file, options) {\n  var exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : 'noexif';\n  return ['tus-rn', file.name || 'noname', file.size || 'nosize', exifHash, options.endpoint].join('/');\n}\n\nfunction hashCode(str) {\n  // from https://stackoverflow.com/a/8831937/151666\n  var hash = 0;\n\n  if (str.length === 0) {\n    return hash;\n  }\n\n  for (var i = 0; i < str.length; i++) {\n    var _char = str.charCodeAt(i);\n\n    hash = (hash << 5) - hash + _char;\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n}","map":{"version":3,"sources":["/home/joao/Projects/iconect_test/dropzone/node_modules/tus-js-client/lib.esm/browser/fingerprint.js"],"names":["isReactNative","fingerprint","file","options","Promise","resolve","reactNativeFingerprint","name","type","size","lastModified","endpoint","join","exifHash","exif","hashCode","JSON","stringify","str","hash","length","i","_char","charCodeAt"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,iBAA1B,C,CAA6C;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoC;AACjD,MAAIH,aAAa,EAAjB,EAAqB;AACnB,WAAOI,OAAO,CAACC,OAAR,CAAgBC,sBAAsB,CAACJ,IAAD,EAAOC,OAAP,CAAtC,CAAP;AACD;;AAED,SAAOC,OAAO,CAACC,OAAR,CAAgB,CAAC,QAAD,EAAWH,IAAI,CAACK,IAAhB,EAAsBL,IAAI,CAACM,IAA3B,EAAiCN,IAAI,CAACO,IAAtC,EAA4CP,IAAI,CAACQ,YAAjD,EAA+DP,OAAO,CAACQ,QAAvE,EAAiFC,IAAjF,CAAsF,GAAtF,CAAhB,CAAP;AACD;;AAED,SAASN,sBAAT,CAAgCJ,IAAhC,EAAsCC,OAAtC,EAA+C;AAC7C,MAAIU,QAAQ,GAAGX,IAAI,CAACY,IAAL,GAAYC,QAAQ,CAACC,IAAI,CAACC,SAAL,CAAef,IAAI,CAACY,IAApB,CAAD,CAApB,GAAkD,QAAjE;AACA,SAAO,CAAC,QAAD,EAAWZ,IAAI,CAACK,IAAL,IAAa,QAAxB,EAAkCL,IAAI,CAACO,IAAL,IAAa,QAA/C,EAAyDI,QAAzD,EAAmEV,OAAO,CAACQ,QAA3E,EAAqFC,IAArF,CAA0F,GAA1F,CAAP;AACD;;AAED,SAASG,QAAT,CAAkBG,GAAlB,EAAuB;AACrB;AACA,MAAIC,IAAI,GAAG,CAAX;;AAEA,MAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAOD,IAAP;AACD;;AAED,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACE,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACnC,QAAIC,KAAK,GAAGJ,GAAG,CAACK,UAAJ,CAAeF,CAAf,CAAZ;;AAEAF,IAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAd,GAAqBG,KAA5B;AACAH,IAAAA,IAAI,IAAIA,IAAR,CAJmC,CAIrB;AACf;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import isReactNative from './isReactNative'; // TODO: Differenciate between input types\n\n/**\n * Generate a fingerprint for a file which will be used the store the endpoint\n *\n * @param {File} file\n * @param {Object} options\n * @param {Function} callback\n */\n\nexport default function fingerprint(file, options) {\n  if (isReactNative()) {\n    return Promise.resolve(reactNativeFingerprint(file, options));\n  }\n\n  return Promise.resolve(['tus-br', file.name, file.type, file.size, file.lastModified, options.endpoint].join('-'));\n}\n\nfunction reactNativeFingerprint(file, options) {\n  var exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : 'noexif';\n  return ['tus-rn', file.name || 'noname', file.size || 'nosize', exifHash, options.endpoint].join('/');\n}\n\nfunction hashCode(str) {\n  // from https://stackoverflow.com/a/8831937/151666\n  var hash = 0;\n\n  if (str.length === 0) {\n    return hash;\n  }\n\n  for (var i = 0; i < str.length; i++) {\n    var _char = str.charCodeAt(i);\n\n    hash = (hash << 5) - hash + _char;\n    hash &= hash; // Convert to 32bit integer\n  }\n\n  return hash;\n}"]},"metadata":{},"sourceType":"module"}