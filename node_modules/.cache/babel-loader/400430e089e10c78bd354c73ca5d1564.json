{"ast":null,"code":"var _jsxFileName = \"/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./Dropzone.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropzone = () => {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const [isHovering, setIsHovering] = useState();\n\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n\n  function handleDrop(event) {\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n    const newFiles = [];\n    const {\n      items,\n      files\n    } = event.dataTransfer;\n\n    if (items) {\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\n      for (let i = 0, item; item = items[i], i < items.length; i++) {\n        // Se os itens soltos não forem arquivos, rejeite-os\n        if (item.kind === \"file\") {\n          newFiles.push(item.getAsFile());\n        }\n      }\n    } else {\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\n      for (var i = 0, file; file = files[i], i < event.dataTransfer.files.length; i++) {\n        console.log(\"... file[\" + i + \"].name = \" + file.name);\n      }\n    }\n\n    setFiles(f => {\n      f.push(newFiles);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragOver: handleDragOver,\n    onDragEnter: () => setIsHovering(true),\n    onDragExit: () => setIsHovering(false),\n    onDrop: handleDrop,\n    className: `Dropzone ${isHovering ? \"hovering\" : \"\"}`,\n    children: files.length ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop your files here or click to upload them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropzone, \"dFPNEiqbRFWkbFYxUUidAjr6xiM=\");\n\n_c = Dropzone;\nexport default Dropzone;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropzone\");","map":{"version":3,"sources":["/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx"],"names":["useState","Dropzone","files","setFiles","isHovering","setIsHovering","handleDragOver","event","preventDefault","handleDrop","stopPropagation","newFiles","items","dataTransfer","i","item","length","kind","push","getAsFile","file","console","log","name","f"],"mappings":";;;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,OAAO,gBAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAA4B,EAA5B,CAAlC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,EAA5C;;AAEA,WAASM,cAAT,CAAwBC,KAAxB,EAA6D;AAC3DA,IAAAA,KAAK,CAACC,cAAN;AACD;;AAED,WAASC,UAAT,CAAoBF,KAApB,EAAyD;AACvDF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,KAAK,CAACC,cAAN;AACAD,IAAAA,KAAK,CAACG,eAAN;AAEA,UAAMC,QAA4B,GAAG,EAArC;AAEA,UAAM;AAAEC,MAAAA,KAAF;AAASV,MAAAA;AAAT,QAAmBK,KAAK,CAACM,YAA/B;;AAEA,QAAID,KAAJ,EAAW;AACT;AACA,WAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,IAAhB,EAAuBA,IAAI,GAAGH,KAAK,CAACE,CAAD,CAAb,EAAmBA,CAAC,GAAGF,KAAK,CAACI,MAAnD,EAA2DF,CAAC,EAA5D,EAAgE;AAC9D;AACA,YAAIC,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxBN,UAAAA,QAAQ,CAACO,IAAT,CAAcH,IAAI,CAACI,SAAL,EAAd;AACD;AACF;AACF,KARD,MAQO;AACL;AACA,WACE,IAAIL,CAAC,GAAG,CAAR,EAAWM,IADb,EAEGA,IAAI,GAAGlB,KAAK,CAACY,CAAD,CAAb,EAAmBA,CAAC,GAAGP,KAAK,CAACM,YAAN,CAAmBX,KAAnB,CAAyBc,MAFlD,EAGEF,CAAC,EAHH,EAIE;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAcR,CAAd,GAAkB,WAAlB,GAAgCM,IAAI,CAACG,IAAjD;AACD;AACF;;AAEDpB,IAAAA,QAAQ,CAACqB,CAAC,IAAI;AACVA,MAAAA,CAAC,CAACN,IAAF,CAAOP,QAAP;AACH,KAFO,CAAR;AAGD;;AAED,sBACE;AACE,IAAA,UAAU,EAAEL,cADd;AAEE,IAAA,WAAW,EAAE,MAAMD,aAAa,CAAC,IAAD,CAFlC;AAGE,IAAA,UAAU,EAAE,MAAMA,aAAa,CAAC,KAAD,CAHjC;AAIE,IAAA,MAAM,EAAEI,UAJV;AAKE,IAAA,SAAS,EAAG,YAAWL,UAAU,GAAG,UAAH,GAAgB,EAAG,EALtD;AAAA,cAOGF,KAAK,CAACc,MAAN,GAAe,IAAf,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAtDD;;GAAMf,Q;;KAAAA,Q;AAwDN,eAAeA,QAAf","sourcesContent":["import { DragEvent, useState } from \"react\";\nimport \"./Dropzone.css\";\n\nconst Dropzone = () => {\n  const [files, setFiles] = useState<Array<File[] | undefined>>([]);\n  const [isHovering, setIsHovering] = useState<boolean>();\n\n  function handleDragOver(event: DragEvent<HTMLElement>): void {\n    event.preventDefault();\n  }\n\n  function handleDrop(event: DragEvent<HTMLElement>): void {\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n\n    const newFiles: Array<File | null> = [];\n\n    const { items, files } = event.dataTransfer;\n\n    if (items) {\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\n      for (let i = 0, item; (item = items[i]), i < items.length; i++) {\n        // Se os itens soltos não forem arquivos, rejeite-os\n        if (item.kind === \"file\") {\n          newFiles.push(item.getAsFile());\n        }\n      }\n    } else {\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\n      for (\n        var i = 0, file;\n        (file = files[i]), i < event.dataTransfer.files.length;\n        i++\n      ) {\n        console.log(\"... file[\" + i + \"].name = \" + file.name);\n      }\n    }\n\n    setFiles(f => {\n        f.push(newFiles)\n    })\n  }\n\n  return (\n    <div\n      onDragOver={handleDragOver}\n      onDragEnter={() => setIsHovering(true)}\n      onDragExit={() => setIsHovering(false)}\n      onDrop={handleDrop}\n      className={`Dropzone ${isHovering ? \"hovering\" : \"\"}`}\n    >\n      {files.length ? null : (\n        <p>Drop your files here or click to upload them.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}