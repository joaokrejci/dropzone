{"ast":null,"code":"var _jsxFileName = \"/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./Dropzone.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropzone = () => {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const [isHovering, setIsHovering] = useState();\n\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n\n  function handleDrop(event) {\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n    const newFiles = [];\n\n    if (event.dataTransfer.items) {\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\n      event.dataTransfer.items.forEach(element => {\n        // Se os itens soltos não forem arquivos, rejeite-os\n        if (event.dataTransfer.items[i].kind === \"file\") {\n          newFiles.push(event.dataTransfer.items[i].getAsFile());\n        }\n      });\n    } else {\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\n      for (var i = 0; i < event.dataTransfer.files.length; i++) {\n        console.log(\"... file[\" + i + \"].name = \" + event.dataTransfer.files[i].name);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDragOver: handleDragOver,\n    onDragEnter: () => setIsHovering(true),\n    onDragExit: () => setIsHovering(false),\n    onDrop: handleDrop,\n    className: `Dropzone ${isHovering ? \"hovering\" : \"\"}`,\n    children: files.length ? null : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop your files here or click to upload them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropzone, \"dFPNEiqbRFWkbFYxUUidAjr6xiM=\");\n\n_c = Dropzone;\nexport default Dropzone;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropzone\");","map":{"version":3,"sources":["/home/joao/Projects/iconect_test/dropzone/src/components/Dropzone.tsx"],"names":["useState","Dropzone","files","setFiles","isHovering","setIsHovering","handleDragOver","event","preventDefault","handleDrop","stopPropagation","newFiles","dataTransfer","items","forEach","element","i","kind","push","getAsFile","length","console","log","name"],"mappings":";;;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,OAAO,gBAAP;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAA0B,EAA1B,CAAlC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,EAA5C;;AAEA,WAASM,cAAT,CAAwBC,KAAxB,EAA6D;AAC3DA,IAAAA,KAAK,CAACC,cAAN;AACD;;AAED,WAASC,UAAT,CAAoBF,KAApB,EAAyD;AACvDF,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,IAAAA,KAAK,CAACC,cAAN;AACAD,IAAAA,KAAK,CAACG,eAAN;AAEA,UAAMC,QAA4B,GAAG,EAArC;;AAEA,QAAIJ,KAAK,CAACK,YAAN,CAAmBC,KAAvB,EAA8B;AAC5B;AACAN,MAAAA,KAAK,CAACK,YAAN,CAAmBC,KAAnB,CAAyBC,OAAzB,CAAiCC,OAAO,IAAI;AACxC;AACA,YAAIR,KAAK,CAACK,YAAN,CAAmBC,KAAnB,CAAyBG,CAAzB,EAA4BC,IAA5B,KAAqC,MAAzC,EAAiD;AAC/CN,UAAAA,QAAQ,CAACO,IAAT,CAAcX,KAAK,CAACK,YAAN,CAAmBC,KAAnB,CAAyBG,CAAzB,EAA4BG,SAA5B,EAAd;AACD;AACJ,OALD;AAMD,KARD,MAQO;AACL;AACA,WAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACK,YAAN,CAAmBV,KAAnB,CAAyBkB,MAA7C,EAAqDJ,CAAC,EAAtD,EAA0D;AACxDK,QAAAA,OAAO,CAACC,GAAR,CACE,cAAcN,CAAd,GAAkB,WAAlB,GAAgCT,KAAK,CAACK,YAAN,CAAmBV,KAAnB,CAAyBc,CAAzB,EAA4BO,IAD9D;AAGD;AACF;AACF;;AAED,sBACE;AACE,IAAA,UAAU,EAAEjB,cADd;AAEE,IAAA,WAAW,EAAE,MAAMD,aAAa,CAAC,IAAD,CAFlC;AAGE,IAAA,UAAU,EAAE,MAAMA,aAAa,CAAC,KAAD,CAHjC;AAIE,IAAA,MAAM,EAAEI,UAJV;AAKE,IAAA,SAAS,EAAG,YAAWL,UAAU,GAAG,UAAH,GAAgB,EAAG,EALtD;AAAA,cAOGF,KAAK,CAACkB,MAAN,GAAe,IAAf,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA9CD;;GAAMnB,Q;;KAAAA,Q;AAgDN,eAAeA,QAAf","sourcesContent":["import { DragEvent, useState } from \"react\";\nimport \"./Dropzone.css\";\n\nconst Dropzone = () => {\n  const [files, setFiles] = useState<Array<File | undefined>>([]);\n  const [isHovering, setIsHovering] = useState<boolean>();\n\n  function handleDragOver(event: DragEvent<HTMLElement>): void {\n    event.preventDefault();\n  }\n\n  function handleDrop(event: DragEvent<HTMLElement>): void {\n    setIsHovering(false);\n    event.preventDefault();\n    event.stopPropagation();\n\n    const newFiles: Array<File | null> = [];\n\n    if (event.dataTransfer.items) {\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\n      event.dataTransfer.items.forEach(element => {\n          // Se os itens soltos não forem arquivos, rejeite-os\n          if (event.dataTransfer.items[i].kind === \"file\") {\n            newFiles.push(event.dataTransfer.items[i].getAsFile());\n          }\n      });\n    } else {\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\n      for (var i = 0; i < event.dataTransfer.files.length; i++) {\n        console.log(\n          \"... file[\" + i + \"].name = \" + event.dataTransfer.files[i].name\n        );\n      }\n    }\n  }\n\n  return (\n    <div\n      onDragOver={handleDragOver}\n      onDragEnter={() => setIsHovering(true)}\n      onDragExit={() => setIsHovering(false)}\n      onDrop={handleDrop}\n      className={`Dropzone ${isHovering ? \"hovering\" : \"\"}`}\n    >\n      {files.length ? null : (\n        <p>Drop your files here or click to upload them.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}